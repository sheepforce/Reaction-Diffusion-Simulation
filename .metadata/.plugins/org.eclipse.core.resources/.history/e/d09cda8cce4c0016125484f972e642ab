#!/usr/bin/env python

'''
Created on 22.01.2016

@author: maximilian
'''
from __future__ import print_function
from Data.ReactionParser import ReactionParser
from Data.BlockGenerator import BlockGenerator
from Data.ConcentrationParser import ConcentrationParser
from Data.DiffusionParser import DiffusionParser


import argparse
import os

if __name__ == "__main__":
    fortranInput = ""
    options = argparse.ArgumentParser()
    options.add_argument("-f","--file", help="enter inputfile (path)")
    args = options.parse_args()
    
    print ("Starting program")
    source = args.file
    if source == None:
        source = raw_input("Enter path of inputfile:")
    print ("Reading inputfile...")
    
    try:                                                                    #inputfile einlesen
        sourceFile = open(source).readlines()
    except Exception:
        print ("Error while reading inputfile. File not existing?")
        raw_input("Press ENTER to exit program.")
        exit()
    print ("Done. Starting to analyse data...")
    
    try:                                                                    #Bloecke finden und pruefen
        makeBlocks = BlockGenerator(sourceFile)
    except Exception:
        print ("Error while analyzing data. Is an input block without end tag?")
        raw_input("Press ENTER to exit program.")
        exit()
    
    if "***pathToExistingFortranInput" in makeBlocks.foundBlocks:
        fortranInput = makeBlocks.getBlockByName("***pathToExistingFortranInput")[0]
        print("Done. Using probably existing fortran input.")
    else:
        print ("Done. Checking minimum information...")
        if not makeBlocks.minimumInfo:
            print ("Not enough data given. Make sure to have one rate constant for each reaction and at least the blocks ***reactions, ***reaction rate constants and ***starting concentrations")
            raw_input("Press ENTER to exit program.")
            exit()
        print ("Done. Start parsing reactions.")
       
        try:                                                                    #Reaktionsgleichungen parsen
            parseReactions = ReactionParser(makeBlocks.getBlockByName("***reactions"))
        except Exception:
            print ("Error while parsing data. Check your reaction-equations in the input file.")
            raw_input("Press ENTER to exit program.")
            exit()
        print("Done. Start parsing diffusion coefficients.")       
        
        try:                                                                    #Diffusionskoeffizienten parsen
            parseDiffCoeffs = DiffusionParser(parseReactions.getSubVec(), makeBlocks.getBlockByName("***diffusionCoefficients"))
        except Exception:
            print ("Error while parsing data. Check your diffusion coefficients in the input file.")
            raw_input("Press ENTER to exit program.")
            exit()
        print("Done. Start parsing starting concentrations.")    
        
    
        concentrations = []                                                  #Anfangskonzentrationen parsen
        for i in xrange(len(parseReactions.getSubVec())):
            concentrations.append(ConcentrationParser.parse(parseReactions.getSubVec()[i], makeBlocks.getConcentrations()[0], int(makeBlocks.getBlockByName("***zgrid")[0]), int(makeBlocks.getBlockByName("***zgrid")[0])))
        print("Done. Start writing overview file for substance assignement.")
        SUBSTANCES = open(source + "_substances.dat", "w")
        for i in xrange(len(parseReactions.getSubVec())):
            print("Subs" + str(i+1) + " = " + parseReactions.getSubVec()[i], file = SUBSTANCES)
        SUBSTANCES.close()        
        print("Done. Start generating input for simulation program.")  
        
        FORTRAN = open("Init.dat", "w")
        
    
        #Generierung des inputfile fuer fortran
        #pipeLength
        out = str('%e' % float(makeBlocks.getBlockByName("***pipeLength")[0])).replace("e", "d").replace("+","")
        print(out + " ! pipeLength", file = FORTRAN)
        #if out[out.index("d")+1] == "0" and out[out.index("d")+1] != "-":
        #    print(out[:out.index("d")+1] + out[out.index("d")+2:] + " ! pipeLength")
        #elif out[out.find("d-")+2] == "0":
        #    print(out[:out.index("d")+2] + out[out.index("d")+3:] + " ! pipeLength")
        #else:
        #   print(out + " ! pipeLength")
    
        #pipeRadius
        out = str('%e' % float(makeBlocks.getBlockByName("***pipeRadius")[0])).replace("e", "d").replace("+","")
        print(out + " ! pipeRadius", file = FORTRAN)
        #if out[out.index("d")+1] == "0" and out[out.index("d")+1] != "-":
        #    print(out[:out.index("d")+1] + out[out.index("d")+2:] + " ! pipeRadius")
        #elif out[out.find("d-")+2] == "0":
        #    print(out[:out.index("d")+2] + out[out.index("d")+3:] + " ! pipeRadius")
        #else:
        #    print(out + " ! pipeRadius")
            
        #xygridradius, int
        print(makeBlocks.getBlockByName("***xygridradius")[0] + " ! xygridradius", file = FORTRAN)
        #zgrid, int
        print(makeBlocks.getBlockByName("***zgrid")[0] + " ! zgrid", file = FORTRAN)
        #flowSpeed
        print(str('%e' % float(makeBlocks.getBlockByName("***flowSpeed")[0])).replace("e", "d").replace("+","") + " ! flowSpeed", file = FORTRAN)
        #linearFlowSpeed
        if "***linearFlowSpeed" in makeBlocks.foundBlocks:
            print(str('%e' % float(makeBlocks.getBlockByName("***linearFlowSpeed")[0])).replace("e", "d").replace("+","") + " ! linearFlowSpeed", file = FORTRAN)
        else:
            print("0.0d0 ! linearFlowSpeed", file = FORTRAN)
            
        #integrationStepwidth
        print(str('%e' % float(makeBlocks.getBlockByName("***integrationStepwidth")[0])).replace("e", "d").replace("+","") + " ! integrationStepwidth", file = FORTRAN)
        #integrationIntervall
        print(str('%e' % float(makeBlocks.getBlockByName("***integrationIntervall")[0])).replace("e", "d").replace("+","") + " ! integrationIntervall", file = FORTRAN)
        #vertical dimension of reaction matrices
        print(str(len(parseReactions.getEduMat())) + " ! number of reactions", file = FORTRAN)
        #horizontal dimension of reaction matrices
        print(str(len(parseReactions.getEduMat()[0])) + " ! number of substances", file = FORTRAN)
        #integrationmethod
        print(makeBlocks.getBlockByName("***integrationmethod")[0] + " ! integrationmethod", file = FORTRAN)
        #inflow
        if(makeBlocks.getBlockByName("***inflow")[0] == "true"):
            print(".TRUE. ! inflow", file = FORTRAN)
        else:
            print(".FALSE. !inflow", file = FORTRAN)
        print("", file = FORTRAN)
        
        i = 0
        while i < len(parseReactions.getEduMat()):
            j = 0
            while j < len(parseReactions.getEduMat()[i]):
                print(parseReactions.getEduMat()[i][j], file = FORTRAN)
                j+=1
            i+=1
        print("", file = FORTRAN)
        i = 0
        while i < len(parseReactions.getProMat()):
            j = 0
            while j < len(parseReactions.getProMat()[i]):
                print(parseReactions.getProMat()[i][j], file = FORTRAN)  
                j+=1
            i+=1  
        print("", file = FORTRAN)
        i = 0
        while i < len(makeBlocks.getBlockByName("***reactionRateConstants")):
            print(str('%e' % float(makeBlocks.getBlockByName("***reactionRateConstants")[i])).replace("e", "d").replace("+",""), file = FORTRAN)
            i+=1
        print("")
        i = 0
        while i < len(parseDiffCoeffs.diffusionCoefficients):
            print("debug")
            print(str('%e' % float(parseDiffCoeffs.diffusionCoefficients[i])).replace("e", "d").replace("+",""), file = FORTRAN)
            i+=1
        print("", file = FORTRAN)
        i = 0
        while i < len(concentrations):
            j = 0
            while j < len(concentrations[i]):
                print(str('%e' % float(concentrations[i][j])).replace("e", "d").replace("+",""), file = FORTRAN)  
                j+=1
            i+=1  
        
        FORTRAN.close()
        print("Finished generating FORTRAN-input. Simulation taking the stage, Parser says bye!")
        os.system(makeBlocks.getBlockByName("***exec") + " pipe_3delvolve") 
        exit()
        